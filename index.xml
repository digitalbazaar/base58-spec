<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN" "https://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc5646 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5646.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xsl' ?>

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" docName="draft-msporny-base58"
     ipr="trust200902" submissionType="independent">
  <front>
    <title abbrev="Base58 Encoding">The Base58 Encoding Scheme</title>

    <author fullname="Manu Sporny" initials="M.S." surname="Sporny">
      <organization>Digital Bazaar</organization>
      <address>
        <email>msporny@digitalbazaar.com</email>
      </address>
    </author>

    <!-- Meta-data Declarations -->
    <date month="November" year="2019" />
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>base</keyword>
    <keyword>encoding</keyword>
    <keyword>base58</keyword>
    <keyword>bitcoin</keyword>
    <abstract>
      <t>
This document specifies the base 58 encoding scheme, including an introduction
to the benefits of the approach, the encoding and decoding algorithm,
alternative alphabets, and security considerations.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
When trasmitting data, it can be useful to encode the data in a way that
survives lower fidelity transmission mechanisms. For example, encoding data
using a human alphabet, or encoding the data in a way that a human being can
visually confirm the encoded data while reducing the opportunity to make a
mistake. The Base58 encoding scheme is similar to the Base64 encoding scheme in
that it can translate any binary data to a text string. It is different from
Base64 in that the conversion alphabet has been carefully picked to work well
in environments where a human being, such as a developer or other human being,
might need to work with the information.
      </t>
      <t>
Base58 is designed with a number of usability characteristics in mind that
Base64 does not consider. First, similar looking letters are omitted such as 0
(zero), O (capital o), I (capital i) and l (lower case L). Doing so eliminates
the possibility of a human being mistaking similar characters for a different
character. Second, the non-alphanumeric characters + (plus), = (equals), and /
(slash) are omitted to make it possible to use Base58 values in all modern file
systems and URL schemes without the need for translation. Third, by using only
alphanumeric characters, easy double-click or double tap selection is possible
in modern computer interfaces. Fourth, social messaging systems do not line
break on alphanumeric strings making it easier to e-mail or message Base58
values for debugging or sharing purposes. Fifth, unlike Base64, there is no
padding making many Base58 values smaller (on average) or the same size as
Base64 values for values up to 64 bytes, and less than 2% larger for values
larger than 256 bytes. Finally, Base64 has eleven encoding variations that lead
to miscommunication among developers on which variety of Base64 to use. This
specification asserts that there is just one simple encoding mechanism for
Base58, making implementations and developer interactions simpler.
      </t>
      <t>
While Base58 does have a number of beneficial usability features, it is not
always a good choice for an encoding format. For example, when encoding large
amounts of data, it is 2% less efficient than base64. Developers might avoid
Base58 if a 2% increase in efficiency over large data sets is desired.
      </t>

      <section title="Requirements Language">
        <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC 2119.
        </t>
      </section>
    </section>

    <?rfc needLines="8" ?>


    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
Thanks to
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
      </t>
    </section>
  </middle>

  <back>
  </back>
</rfc>
